coord_polar(theta = "y") +
labs(fill = "Class") +
ggtitle("Number of cars by class") +
theme_minimal()
ggplot(a, aes(x = x, y = y)) +
geom_bar(stat = "identity", fill = "grey", width = 0.5) +
geom_point(size = 4, color = "blue")
ggplot(table(a), aes(x = x, y = y)) +
geom_bar(stat = "identity", fill = "grey", width = 0.5) +
geom_point(size = 4, color = "blue")
pie(a, col = coul, main = "Inclinação do segmento ST de pico do exercício ")
pie(table(a), col = coul, main = "Inclinação do segmento ST de pico do exercício ")
data_rna_GBM$paper_Original.Subtype
qplot(data_rna_GBM$paper_Original.Subtype)
pie(table(data_rna_GBM$paper_Original.Subtype), col = coul, main = "Inclinação do segmento ST de pico do exercício ")
data_rna_GBM$paper_Original.Subtype
qplot(data_rna_GBM$paper_Original.Subtype)
pie(table(data_rna_GBM$paper_Original.Subtype), main = "Inclinação do segmento ST de pico do exercício ")
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(data_rna_GBM$paper_Original.Subtype
, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(table(data_rna_GBM$paper_Original.Subtype)
, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(data.frame(data_rna_GBM$paper_Original.Subtype)
, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(data.frame(data_rna_GBM$paper_Original.Subtype
geom_bar(stat="identity", width=1) +
ggplot(data.frame(data_rna_GBM$paper_Original.Subtype
, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0))
data_rna_GBM$paper_Original.Subtype
table(data_rna_GBM$paper_Original.Subtype)
table(data_rna_GBM$paper_Original.Subtype)
qplot(data_rna_GBM$paper_Original.Subtype)
count(table(data_rna_GBM$paper_Original.Subtype)
)
count(data_rna_GBM$paper_Original.Subtype
)
data_rna_GBM$paper_Original.Subtype
qplot(data_rna_GBM$paper_Original.Subtype)
# Pie Chart Variant type
w = table(sub_CCLE_mutations$paper_Original.Subtype)
# Pie Chart Variant type
w = table(data_rna_GBM$paper_Original.Subtype)
t = as.data.frame(w)
slices <- t$Freq
lbls <- t$Var1
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col = c("darkslategray1", "coral", "darkolivegreen1", "navajowhite"),
main="Variant Type")
# Basic piechart
ggplot(t, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(w, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(w, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() # remove background, grid, numeric labels
boxplot(data_rna_GBM$paper_Original.Subtype)
boxplot(data_rna_GBM$paper_Gender)
ggplot(data_rna_GBM$paper_Original.Subtype, geom_bar(stat = "summary", fun = "mean", fill = "steelblue"))
ggplot(table(data_rna_GBM$paper_Original.Subtype), geom_bar(stat = "summary", fun = "mean", fill = "steelblue"))
ggplot(data_rna_GBM$paper_Original.Subtype, geom_bar(stat = "summary", fun = "mean", fill = "steelblue"))
qplot(data_rna_GBM$paper_Original.Subtype)
ggplot(data_rna_GBM$paper_Original.Subtype
, aes(x = factor(cyl), y = mpg)) +
geom_bar(stat = "summary", fun = "mean", fill = "steelblue") + theme_minimal()
a = table(data_rna_GBM$paper_Original.Subtype
)
ggplot(a
, aes(x = factor(cyl), y = mpg)) +
geom_bar(stat = "summary", fun = "mean", fill = "steelblue") + theme_minimal()
qplot(data_rna_GBM$paper_Original.Subtype)
qplot(data_rna_GBM$paper_Original.Subtype, colorRamp())
qplot(data_rna_GBM$paper_Original.Subtype, colors())
qplot(data_rna_GBM$paper_Original.Subtype)
data_rna_GBM$paper_Original.Subtype
ggplot2::autoplot(data_rna_GBM$paper_Original.Subtype
)
ggplot2::plot(data_rna_GBM$paper_Original.Subtype)
ggplot2::bplot(data_rna_GBM$paper_Original.Subtype)
ggplot2::plot(data_rna_GBM$paper_Original.Subtype)
qplot(data_rna_GBM$paper_Original.Subtype)
qplot(data_rna_GBM$paper_Original.Subtype)
mean(data_rna_GBM)
mean(table(data_rna_GBM)
mean(table(data_rna_GBM))
qplot(data_rna_GBM$paper_Original.Subtype)
geom_histogram(color = "white", fill = "lightblue") +
theme_classic(base_size = 18) +
scale_x_continuous(breaks = seq(from = 4,to = 8,by = 1), limits = c(4,8)) +
xlab("Comprimento da sépala (mm)") +
ylab("Frequência")
geom_histogram(data_rna_GBM$paper_Original.Subtype
,color = "white", fill = "lightblue") +
theme_classic(base_size = 18) +
scale_x_continuous(breaks = seq(from = 4,to = 8,by = 1), limits = c(4,8)) +
xlab("Comprimento da sépala (mm)") +
ylab("Frequência")
boxplot(data_rna_GBM$paper_Original.Subtype
)
qplot(data_rna_GBM$paper_IDH.status, col=lightblue)
qplot(data_rna_GBM$paper_IDH.status, col=("lightblue")
qplot(data_rna_GBM$paper_IDH.status, col=("lightblue"))
qplot(data_rna_GBM$paper_IDH.status, col="lightblue")
qplot(data_rna_GBM$paper_IDH.status, colours()="lightblue")
qplot(data_rna_GBM$paper_IDH.status, colours(lightblue")
qplot(data_rna_GBM$paper_IDH.status, colours(lightblue"))
qplot(data_rna_GBM$paper_IDH.status, colours(lightblue))
qplot(data_rna_GBM$paper_IDH.status, colours(lightblue)
qplot(data_rna_GBM$paper_IDH.status, colours(lightblue))
knitr::opts_chunk$set(echo = TRUE)
query <- GDCquery(project = "TCGA-GBM",
legacy = TRUE,
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type = "normalized_results",
experimental.strategy = "RNA-Seq")
library(TCGAbiolinks)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(DESeq2)
library(SummarizedExperiment)
library(DESeq2)
library(ggplot2)
query <- GDCquery(project = "TCGA-GBM",
legacy = TRUE,
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type = "normalized_results",
experimental.strategy = "RNA-Seq")
query
GDCdownload(query)
data_teste = GDCprepare(query, summarizedExperiment = FALSE)
data_teste
plot(data_teste)
qplot(data_teste)
data_de = data_rna_GBM[,!is.na(data_rna_GBM$paper_Gender)]
keep = rowSums(counts(ddsSE)) >= 10
ddsSE = ddsSE[keep,]
resultsNames(ddsSE)
res = results(ddsSE, name = "paper_Gender_male_vs_female")
dea = as.data.frame(res)
summary(res)
DESeq2::plotMA(res, ylim = c(-7,7))
resultsNames(ddsSE)
res = results(ddsSE, name = "paper_Original.Subtype_G.CIMP_vs_Classical")
dea = as.data.frame(res)
summary(res)
a = DESeq2::plotMA(res, ylim = c(-7,7))
data_rna_GBM
clinical.GBM
clinical.GBM[1]
clinical.GBM[1]$clinical_omf_v4.0_gbm
clinical.GBM[1]$clinical_omf_v4.0_gbm$malignancy_type
clinical.GBM$clinical_omf_v4.0_gbm$malignancy_type
clinical.GBM
data_rna_GBM
data_rna_GBM$patient
data_rna_GBM
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GDCRNATools")
library(GDCRNATools)
knitr::opts_chunk$set(echo = TRUE)
library(GDCRNATools)
library(GDCRNATools)
library(SummarizedExperiment)
library(DESeq2)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("summarytools")
library(TCGAbiolinks)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(DESeq2)
install.packages(DESeq2)
install.packages(DESeq2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
proj = "TCGA-GBM"
query = GDCquery(
project = proj,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
GDCdownload(query)
gbm= GDCprepare(query)
gbm
install.packages("car")
install.packages("summarytools")
assayNames(gbm)
rowRanges(gbm)
library(DESeq2)
library(edgeR)
library(limma)
library(Glimma)
library(org.Mm.eg.db)
library(ggplot2)
library(car)
library(genefilter)
library(summarytools)
install.packages("edgeR")
install.packages("Glimma")
library(edgeR)
install.packages("edgeR")
library(edgeR)
library(limma)
library(Glimma)
install.packages("Glimma")
library(car)
library(summarytools)
dim(gbm)
class(gbm)
A partir desta análise percebemos que o data_rna_GBM tem 60660 linhas (que correspondem a genes) e 175 colunas (que correspondem a amostras) para além disso, é um objeto da classe RangedSummarizedExperiment, que faz parte do pacote SummarizedExperiment.
**Visualização dos dados de expressão**
## Matrizes counts
```{r}
gbm_assay <- round(assays(gbm)[["unstranded"]])
gbm_assay
dfSummary(gbm_assay)
round( colSums(gbm_assay) / 1e6, 1 )  #(o segundo argumento de round informa quantos pontos decimais devem ser mantidos, ou seja queremos só 1 casa decimal).
round( colSums(gbm_assay) / 1e6, 1 )  #(o segundo argumento de round informa quantos pontos decimais devem ser mantidos, ou seja queremos só 1 casa decimal).
dim(gbm_assay)
dim(gbm_assay)
class(gbm_assay)
sum(is.na(gbm_assay)) #Após uma análise do dataset data_rna_GBM_assay, verificamos que não há presença de valores omissos (NA).
gbm_assay_scale = scale(gbm_assay)   # Standardização
gbm_assay_scale = scale(gbm_assay)   # Standardização
gbm_assay_scale
meta_gbm = colData(gbm)
dim(meta_gbm)  # a tabela contém 175 linhas (amostras) e 107 colunas (informações sobre as amostras)
class(meta_gbm) # dataframe
colnames(meta_gbm) # nomes das colunas
print(dfSummary(meta_gbm, style = 'grid', graph.magnif = 1, valid.col = FALSE,
max.distinct.values = 5, col.widths = c(100, 200, 200, 350, 500, 250),
dfSummary.silent  = TRUE, headings = FALSE, justify = 'l')
, method = 'render', max.tbl.height = 500)
p_grade1
race = as.factor(meta_gbm$race)
age_diag = meta_gbm$age_at_diagnosis
death=meta_gbm$days_to_death
gender = as.factor(meta_gbm$gender)
p_grade = meta_gbm$paper_Grade
p_IDH = meta_gbm$paper_IDH.status
patient = meta_gbm$patient
tissue = as.factor(meta_gbm$definition)
mutation = meta_gbm$paper_Mutation.Count
vital_st = as.factor(meta_gbm$vital_status)
death = meta_gbm$days_to_death
```{r}
sum(is.na(race))
sum(is.na(age_diag))
sum(is.na(gender))
sum(is.na(gender))
sum(is.na(p_grade))
sum(is.na(p_IDH))
sum(is.na(patient))
sum(is.na(tissue))
sum(is.na(mutation))
sum(is.na(vital_st))
sum(is.na(death))
race = na.omit(race)
age_diag = na.omit(age_diag)
gender = na.omit(gender)
p_grade = na.omit(p_grade)
p_IDH = na.omit(p_IDH)
mutation = na.omit(mutation)
vital_st = na.omit(vital_st)
death = na.omit(death)
qplot(race,fill=race, main="Race")
table=table(race)
data=as.data.frame(table)
slices=data$Freq
lbls=data$race
pct=round(slices/sum(slices)*100)
lbls=paste(lbls, pct)
lbls=paste(lbls,"%",sep="")
pie(slices,labels = lbls, col = c("darkslategray1", "coral", "darkolivegreen1", "navajowhite"),
main="Race")
hist(age_diag, col = c("lightblue"), main= "Idade(em dias) em que o paciente foi diagnosticado", xlab = "Idade quando do diagnóstico (dias)", ylab = "Frequência")
hist(age_diag, col = c("lightblue"), main= "Idade em que o paciente foi diagnosticado", xlab = "Idade quando do diagnóstico (dias)", ylab = "Frequência")
hist(age_diag, col = c("lightblue"), main= "Idade em que o paciente foi diagnosticado", xlab = "Idade (dias)", ylab = "Frequência")
hist(death, col = c("lightblue"), main= "Tempo(dias) entre o diagnótico e a morte do paciente ", xlab = "Dias", ylab = "Frequência")
hist(death, col = c("lightblue"), main= "Tempo entre o diagnótico e a morte do paciente ", xlab = "Dias", ylab = "Frequência", ylim=100)
hist(death, col = c("lightblue"), main= "Tempo entre o diagnótico e a morte do paciente ", xlab = "Dias", ylab = "Frequência", ylim=(100))
hist(death, col = c("lightblue"), main= "Tempo entre o diagnótico e a morte do paciente ", xlab = "Dias", ylab = "Frequência", ylim=("100"))
hist(death, col = c("lightblue"), main= "Tempo entre o diagnótico e a morte do paciente ", xlab = "Dias", ylab = "Frequência", ylim=c("100"))
hist(death, col = c("lightblue"), main= "Tempo entre o diagnótico e a morte do paciente ", xlab = "Dias", ylab = "Frequência", ylim=c(0,100))
qplot(gender, fill= gender)
qplot(gender, fill= gender, scale.default())
qplot(gender, fill= gender,ylim=c(0,100))
qplot(gender, fill= gender,ylim=c(0,60))
qplot(gender, fill= gender)
qplot(gender, fill= gender, ylim=c(0,115))
qplot(gender, fill= gender, ylim=c(0,115), ylab = "Nº de pessoas" )
table=table(gender)
data=as.data.frame(table)
slices=data$Freq
lbls=data$gender
pct=round(slices/sum(slices)*100)
lbls=paste(lbls, pct)
lbls=paste(lbls,"%",sep="")
pie(slices,labels = lbls, col = c("pink", "lightblue"), main="Género")
qplot(p_IDH, fill=p_IDH, main="Estado do gene isocitrato desidrogenase (IDH) nas amostras")
qplot(p_IDH, fill=p_IDH, main="Estado do gene IDH nas amostras")
table=table(p_IDH)
data=as.data.frame(table)
slices=data$Freq
lbls=data$p_IDH
pct=round(slices/sum(slices)*100)
lbls=paste(lbls, pct)
lbls=paste(lbls,"%",sep="")
pie(slices,labels = lbls, col = c("lightblue","darkolivegreen1"), main="Estado do gene isocitrato desidrogenase (IDH) nas amostras")
table=table(p_IDH)
qplot(p_IDH, fill=p_IDH, main="Estado do gene IDH nas amostras") + theme(plot.title = "Estado do gene IDH nas amostras"(hjust = 0.5))  #centrar titulo
table=table(p_IDH)
qplot(p_IDH, fill=p_IDH, main="Estado do gene IDH nas amostras")  #centrar titulo
qplot(p_IDH, fill=p_IDH, main="       Estado do gene IDH nas amostras")  #centrar titulo
qplot(p_IDH, fill=p_IDH, main="                                                     Estado do gene IDH nas amostras")  #centrar titulo
qplot(p_IDH, fill=p_IDH, main="                       Estado do gene IDH nas amostras")  #centrar titulo
qplot(patient)
qplot(tissue, fill=tissue, main="Representa o tipo de amostra de tecido recolhida")
qplot(tissue, fill=tissue, main="           Representa o tipo de amostra de tecido recolhida")
qplot(tissue, fill=tissue, main="           Tipo de amostra de tecido")
qplot(tissue, fill=tissue, main="                        Tipo de tecido")
table=table(tissue)
data=as.data.frame(table)
slices=data$Freq
lbls=data$tissue
pct=round(slices/sum(slices)*100)
lbls=paste(lbls,"%",sep="")
pie(slices,labels = lbls, col = c("lightblue","darkolivegreen1", "navajowhite"), main="Representa o tipo de amostra de tecido recolhida")
hist(mutation, col = "darkolivegreen1", main = "Número de mutações identificadas no genoma do paciente.")
boxplot(mutation,main = "Número de mutações identificadas no genoma do paciente.", ylab= "Nº de Mutações", col= "darkolivegreen1")
hist(mutation, col = "darkolivegreen1", main = "Número de mutações identificadas no genoma do paciente.")
qplot(mutation)
qplot(mutation, fill=mutation) #Escolher
qplot(mutation) #Escolher
qplot(vital_st, fill= vital_st, main="Estado vital do paciente no momento da coleta de dados")
qplot(vital_st, fill= vital_st, main="Estado vital do paciente")
qplot(vital_st, fill= vital_st, main="            Estado vital do paciente")
table=table(vital_st)
data=as.data.frame(table)
lbls=data$vital_st
lbls=data$vital_st
pct=round(slices/sum(slices)*100)
pct=round(slices/sum(slices)*100)
lbls=paste(lbls, pct)
lbls=paste(lbls,"%",sep="")
pie(slices,labels = lbls, col = c("lightblue","darkolivegreen1", "navajowhite"), main="Estado vital do paciente no momento da coleta de dados")
shapiro.test(age_diag ~ gender)
shapiro.test(age_diag, gender)
shapiro.test(age_diag)
shapiro.test(gender)
leveneTest(age_diag ~ gender)
leveneTest(age_diag)
leveneTest(age_diag)
leveneTest(age_diag~gender)
shapiro.test(age_diag)
ks.test(age_diag)
ks.test(age_diag, gender)
shapiro.test(age_diag)
wilcox.test(age_diag~gender)
boxplot(age_diag ~ gender, data = meta_gbm, main = "Idade Aquando do Diagnóstico Vs Género", xlab = "Género", ylab = "Idade em anos", col = c( "coral", "darkolivegreen1"))
boxplot(age_diag ~ gender, data = gbm, main = "Idade Aquando do Diagnóstico Vs Género", xlab = "Género", ylab = "Idade em anos", col = c( "coral", "darkolivegreen1"))
boxplot(age_diag ~ gender, data = meta_gbm, main = "Idade Aquando do Diagnóstico Vs Género", xlab = "Género", ylab = "Idade em anos", col = c( "coral", "darkolivegreen1"))
boxplot(age_diag ~ gender, main = "Idade Aquando do Diagnóstico Vs Género", xlab = "Género", ylab = "Idade em anos", col = c( "coral", "darkolivegreen1"))
boxplot(age_diag ~ gender, main = "Idade aquando diagnóstico", xlab = "Género", ylab = "Idade (dias)", col = c( "coral", "darkolivegreen1"))
boxplot(age_diag ~ gender, main = "Idade de diagnóstico", xlab = "Género", ylab = "Idade (dias)", col = c( "coral", "darkolivegreen1"))
vital_st
tissue
data_de = gbm[,!is.na(gbm$paper_IDH.status)] #retirar NA
ddsSE_IDH = DESeqDataSet(data_de, design = ~ paper_IDH.status)
keep = rowSums(counts(ddsSE_IDH)) >= 10  #Objetivo do filtro :filtrar as linhas da matriz (counts) que possuem baixos niveis de expressão em todas as amostras.
ddsSE_IDH = ddsSE[keep,]
ddsSE_IDH = ddsSE_IDH[keep,]
ddsSE_IDH = DESeq(ddsSE_IDH)
p_IDH
resultsNames(ddsSE_IDH)
res_IDH = results(ddsSE_IDH, name = "paper_IDH.status_WT_vs_Mutant")
dea = as.data.frame(res_IDH)
dea
summary(res_IDH)
sum(res_IDH$padj < 0.1, na.rm=TRUE)
sum(res_IDH$padj < 0.05, na.rm=TRUE)
resSig <- subset(res_IDH, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
head(resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ])
topGene = rownames(res_IDH)[which.min(res_IDH$padj)]
topGene
DESeq2::plotMA(res_IDH, ylim = c(-7,7))
DESeq2::plotMA(res_IDH, ylim = c(-7,7))
topGene = rownames(res_IDH)[which.min(res_IDH$padj)]
with(res_IDH[topGene, ], {
points(baseMean, log2FoldChange, col="black", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="black")
})
data_de = gbm[,!is.na(gbm$paper_Gender)]
data_de = gbm[,!is.na(gbm$paper_Gender)]
ddsSE_sex = DESeqDataSet(data_de, design = ~ paper_Gender)
keep = rowSums(counts(ddsSE_sex)) >= 10
ddsSE_sex = ddsSE_sex[keep,]
ddsSE_sex = DESeq(ddsSE_sex)
topGene = rownames(res_IDH)[which.min(res_IDH$padj)]
topGene
hist(res_IDH$pvalue[res_IDH$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white", main=' Contagem média normalizada maior que 1')
qplot(res_IDH$pvalue[res_IDH$baseMean > 1])
hist(res_IDH$pvalue[res_IDH$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white", main=' Contagem média normalizada maior que 1')
qplot(res_IDH$pvalue[res_IDH$baseMean > 1], breaks = 0:20/20)
hist
hist(res_IDH$pvalue[res_IDH$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white", main=' Contagem média normalizada maior que 1')
resultsNames(ddsSE_sex)
res_sex = results(ddsSE_sex, name = "paper_Gender_male_vs_female")
res_sex = results(ddsSE_sex, name = "paper_Gender_male_vs_female")
dea = as.data.frame(res_sex)
summary(res_sex)
s
res_sex = results(ddsSE_sex, name = "paper_Gender_male_vs_female")
dea = as.data.frame(res_sex)
summary(res_sex)
sum(res_sex$padj < 0.1, na.rm=TRUE)
sum(res_sex$padj < 0.05, na.rm=TRUE)
resSig <- subset(res_sex, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
head(resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ])
topGene <- rownames(res)[which.min(res$padj)]
DESeq2::plotMA(res_sex, ylim = c(-7,7))
DESeq2::plotMA(res_sex, ylim = c(-7,7))
topGene = rownames(res_sex)[which.min(res_sex$padj)]
topGene <- rownames(res_sex)[which.min(res$padj)]
topGene = rownames(res_sex)[which.min(res_sex$padj)]
topGene
with(res_sex[topGene, ], {
points(baseMean, log2FoldChange, col="black", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="black")
})
DESeq2::plotMA(res_sex, ylim = c(-7,7))
DESeq2::plotMA(res_sex, ylim = c(-7,7))
with(res_sex[topGene, ], {
points(baseMean, log2FoldChange, col="black", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="black")
})
hist(res$pvalue[res_sex$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white", main=' Contagem média normalizada maior que 1')
hist(res_sex$pvalue[res_sex$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white", main=' Contagem média normalizada maior que 1')
hist(res_sex$pvalue[res_sex$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white", main=' Contagem média normalizada maior que 1', ylim=c(0,3500))
gbm$paper_Original.Subtype
a = as.factor(gbm$paper_Original.Subtype)
qplot(gbm$paper_Original.Subtype, fill=a)
data_de = gbm[,!is.na(gbm$paper_Original.Subtype)]
ddsSE_subtype = DESeqDataSet(data_de, design = ~ paper_Original.Subtype)
keep = rowSums(counts(ddsSE_subtype)) >= 10
ddsSE_subtype = ddsSE_subtype[keep,]
ddsSE_subtype = DESeq(ddsSE_subtype)
ddsSE_subtype = DESeq(ddsSE_subtype)
resultsNames(ddsSE_subtype)
resultsNames(ddsSE_subtype)
res = results(ddsSE_subtype, name = "paper_Original.Subtype_G.CIMP_vs_Classical")
res = results(ddsSE_subtype, name = "paper_Original.Subtype_G.CIMP_vs_Classical")
dea = as.data.frame(res)
summary(res)
a = DESeq2::plotMA(res, ylim = c(-7,7), main="paper_Original.Subtype_G.CIMP_vs_Classical")
res = results(ddsSE_subtype, name = "paper_Original.Subtype_Mesenchymal_vs_Classical")
res = results(ddsSE_subtype, name = "paper_Original.Subtype_Mesenchymal_vs_Classical")
dea = as.data.frame(res)
dea = as.data.frame(res)
summary(res)
DESeq2::plotMA(res, ylim = c(-7,7),main="paper_Original.Subtype_Mesenchymal_vs_Classical")
DESeq2::plotMA(res, ylim = c(-7,7),main="paper_Original.Subtype_Mesenchymal_vs_Classical")
topGene = rownames(res)[which.min(res$padj)]
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})
res = results(ddsSE_subtype, name = "paper_Original.Subtype_Proneural_vs_Classical")
res = results(ddsSE_subtype, name = "paper_Original.Subtype_Proneural_vs_Classical")
dea = as.data.frame(res)
summary(res)
install.packages("RegEnrich")
library(RegEnrich)
install.packages("Rtools")
