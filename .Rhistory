}
treatment(clinical_clinical_semna)
print("----------------------------")
print(table_col)
for (colname in colnames(df)){
col = df[[colname]]
table_col = table(col)
print("----------------------------")
print(table_col)
}
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
table_col = table(col)
print("----------------------------")
print(table_col)
}
}
treatment(clinical_clinical_semna)
clinical_clinical_semna = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/clinical.tsv", header=TRUE)
clinical_clinical_semna
clinical_clinical_semna
for (colname in colnames(df)){
col = df[[colname]]
table_col = table(col)
print("----------------------------")
print(table_col)
}
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
table_col = table(col)
print("----------------------------")
print(table_col)
}
}
treatment(clinical_clinical_semna)
checker = lenght(unique((col)) == 1)
checker = len(unique((col)) == 1)
checker = length(unique((col)) == 1)
print("----------------------------")
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)) == 1)
print("----------------------------")
print(table_col)
}
}
treatment(clinical_clinical_semna)
print(checker)
checker = length(unique((col)))
print("----------------------------")
print(checker)
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
print("----------------------------")
print(checker)
}
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
print("----------------------------")
print(checker)
}
}
treatment(clinical_clinical_semna)
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
print("----------------------------")
print(checker)
}
}
treatment(clinical_clinical_semna)
clear
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
print("----------------------------")
print(checker)
}
}
treatment(clinical_clinical_semna)
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
df$colname = NULL
}
print("----------------------------")
print(checker)
}
}
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
df$colname = NULL
}
}
}
treatment(clinical_clinical_semna)
clinical_clinical_semna
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
col = NULL
}
}
}
treatment(clinical_clinical_semna)
clinical_clinical_semna
treatment(clinical_clinical_semna)
clinical_clinical_semna
unique(clinical_clinical$project_id)
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
print("banana")
col = NULL
}
}
}
treatment(clinical_clinical_semna)
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
print("banana")
df[[colname]] = NULL
}
}
}
treatment(clinical_clinical_semna)
clinical_clinical_semna
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
df$colname = NULL
}
}
}
treatment(clinical_clinical_semna)
clinical_clinical_semna
clinical_clinical_semna = treatment(clinical_clinical_semna)
clinical_clinical_semna
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
col = NULL
}
}
}
clinical_clinical_semna = treatment(clinical_clinical_semna)
clinical_clinical_semna
clinical_clinical_semna = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/clinical.tsv", header=TRUE)
clinical_clinical_semna
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
col = NULL
}
}
}
clinical_clinical_testasaa = treatment(clinical_clinical_semna)
clinical_clinical_testasaa
clinical_clinical_semna = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/clinical.tsv", header=TRUE)
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique((col)))
if (checker == 1){
print("banana")
}
}
}
clinical_clinical_testasaa = treatment(clinical_clinical_semna)
clinical_clinical_testasaa
treatment = function(df){
for (colname in colnames(df)){
col = df[[colname]]
checker = length(unique(col))
if (checker == 1){
print("banana")
}
}
}
clinical_clinical_testasaa = treatment(clinical_clinical_semna)
clinical_clinical_testasaa
treatment = function(df){
cols_delete = sapply(df, function(x) length(unique(x))) == 1
df = df[, !cols_delete]
}
clinical_clinical_testasaa = treatment(clinical_clinical_semna)
clinical_clinical_testasaa
`1076483a.e462.47e5.a47a.ca9544548dff.rna_seq.augmented_star_gene_counts` <- read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv", comment.char="#")
View(`1076483a.e462.47e5.a47a.ca9544548dff.rna_seq.augmented_star_gene_counts`)
View(`1076483a.e462.47e5.a47a.ca9544548dff.rna_seq.augmented_star_gene_counts`)
expression_data = read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv"
expression_data
expression_data = read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv"
expression_data = read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv")
expression_data = read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv")
expression_data = read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv")
expression_data = read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv", comment.char="#")
expression_data
View(expression_data)
View(expression_data)
View(clinical_clinical)
View(clinical_clinical)
treatment_unique_colums(clinical_clinical)
treatment_unique_colums(clinical_exposure)
treatment_unique_colums(project_aliquot)
treatment_unique_colums(project_analyte)
treatment_unique_colums = function(df){
cols_delete = sapply(df, function(x) length(unique(x))) == 1
df = df[, !cols_delete]
}
treatment_unique_colums(clinical_clinical)
treatment_unique_colums(clinical_exposure)
treatment_unique_colums(project_aliquot)
treatment_unique_colums(project_analyte)
treatment_unique_colums(project_clinical)
treatment_unique_colums(project_portion)
treatment_unique_colums(project_slide)
rnaseq_teste = read_csv("CCLE_expression_lixo_lixo.csv")
rnaseq_teste = read_csv("CCLE_expression_lixo_lixo.csv")
rnaseq_teste = read.csv("CCLE_expression_lixo_lixo.csv")
dim(rnaseq_teste)
rnaseq_teste
clinical_clinical = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/clinical.tsv", header=TRUE)
clinical_exposure = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/exposure.tsv", header=TRUE)
clinical_clinical = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/clinical.tsv", header=TRUE)
clinical_exposure = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/exposure.tsv", header=TRUE)
#2.2 Import dos Dados Project
```{r}
project_aliquot = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/aliquot.tsv", header=TRUE)
project_analyte = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/analyte.tsv", header=TRUE)
project_portion = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/portion.tsv", header=TRUE)
project_sample = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/sample.tsv", header=TRUE)
project_slide = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/slide.tsv", header=TRUE)
#2.3  Import Expression Data
```{r}
expression_data = read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv", comment.char="#")
expression_data
rnaseq_teste
rnaseq_teste
boxplot(rnaseq_teste)
plot(rnaseq_teste)
dados = getGDCprojects()
dados = getGDCprojects = "TCGA-GBM"
dados = getGDCprojects = "TCGA-GBM", data.category = "Transcriptome Profiling")
dados = GDCquery(project = "TCGA-GBM", data.category = "Transcriptome Profiling")
gdcprojects = getGDCprojects()
library(TCGAbiolinks)
gdcprojects = getGDCprojects()
dados = GDCquery(project = "TCGA-GBM", data.category = "Transcriptome Profiling")
output = getResults(dados)
output
dados = GDCquery(project = "TCGA-GBM", data.category = "Transcriptome Profiling", acess = "open")
dados = GDCquery(project = "TCGA-GBM", data.category = "Transcriptome Profiling", access = "open")
output = getResults(dados)
output
GDCdownload(output)
GDCdownload(query)
gdcprojects = getGDCprojects()
gdcprojects = getGDCprojects()
query = GDCquery(project = "TCGA-GBM", data.category = "Transcriptome Profiling", access = "open")
gdcprojects = getGDCprojects()
query = GDCquery(project = "TCGA-GBM", data.category = "Transcriptome Profiling", access = "open")
output = getResults(query)
GDCdownload(query)
library(TCGAbiolinks)
gdcprojects = getGDCprojects()
query = GDCquery(project = "TCGA-GBM", data.category = "Transcriptome Profiling",experimental.strategy = "RNA-Seq", access = "open")
output = getResults(query)
GDCdownload(query)
GDCdownload(query)
library(SummarizedExperiment)
data = GCDprepare(query, SummarizedExperiment = TRUE)
library(TCGAbiolinks)
data = GCDprepare(query, SummarizedExperiment = TRUE)
data = GDCprepare(query, SummarizedExperiment = TRUE)
data = GDCprepare(query, summarizedExperiment = TRUE)
data_mat = assay(data)
data_mat
data
data_mat = assay(data, "unstranded" )
data_mat
query = GDCquery(project = "TCGA-GBM", data.category = "Clinical",experimental.strategy = "RNA-Seq", access = "open")
query = GDCquery(project = "TCGA-GBM", data.category = "Clinical",experimental.strategy = "RNA-Seq", access = "open")
query = GDCquery(project = "TCGA-GBM", data.category = "Clinical", access = "open")
query = GDCquery(project = "TCGA-GBM", data.category = "Clinical", access = "open")
output = getResults(query)
output
GDCdownload(query)
data_mat = assay(data, "unstranded" )
data_mat
clinical_clinical = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/clinical.tsv", header=TRUE)
clinical_exposure = read.delim("~/Documentos/GitHub/Extra-o_Work/clinical.project-TCGA-GBM.2023-03-31/exposure.tsv", header=TRUE)
project_aliquot = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/aliquot.tsv", header=TRUE)
project_analyte = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/analyte.tsv", header=TRUE)
project_portion = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/portion.tsv", header=TRUE)
project_sample = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/sample.tsv", header=TRUE)
project_slide = read.delim("~/Documentos/GitHub/Extra-o_Work/biospecimen.project-TCGA-GBM.2023-03-31/slide.tsv", header=TRUE)
expression_data = read.delim("~/Documentos/GitHub/Extra-o_Work/gdc_download_20230331_112219.521695/ddb16b8d-9ad8-4c66-a986-513d3507b26d/1076483a-e462-47e5-a47a-ca9544548dff.rna_seq.augmented_star_gene_counts.tsv", comment.char="#")
treatment_unique_colums = function(df){
cols_delete = sapply(df, function(x) length(unique(x))) == 1
df = df[, !cols_delete]
}
treatment_unique_colums(clinical_clinical)
treatment_unique_colums(clinical_exposure)
treatment_unique_colums(project_aliquot)
treatment_unique_colums(clinical_clinical)
treatment_unique_colums(clinical_exposure)
treatment_unique_colums(project_aliquot)
treatment_unique_colums(project_analyte)
treatment_unique_colums(project_clinical)
treatment_unique_colums(project_portion)
treatment_unique_colums(project_slide)
library(TCGAbiolinks)
library(TCGAbiolinks)
library(SummarizedExperiment)
gdcprojects = getGDCprojects()
query = GDCquery(project = "TCGA-GBM", data.category = "Transcriptome Profiling",experimental.strategy = "RNA-Seq", access = "open")
output = getResults(query)
data = GDCprepare(query, summarizedExperiment = TRUE)
GDCdownload(query)
data = GDCprepare(query, summarizedExperiment = TRUE)
data = GDCprepare(query, summarizedExperiment = TRUE)
data_mat = assay(data, "unstranded" )
data_mat
data_mat
data
data.assays
data.class()
data
DataFrameList()
data
data
data_mat
output = getResults(query)
data
data = GDCprepare(query)
library(TCGAbiolinks)
library(TCGAbiolinks)
library(SummarizedExperiment)
data = GDCprepare(query)
data_mat = assay(data)
data_mat
clinical_clinical
treatment_unique_colums = function(df){
cols_delete = sapply(df, function(x) length(unique(x))) == 1
df = df[, !cols_delete]
}
treatment_unique_colums(clinical_clinical)
treatment_unique_colums(clinical_exposure)
clinical_clinical
clinical_clinical
cols_delete = sapply(df, function(x) length(unique(x))) == 1
treatment_unique_colums = function(df){
cols_delete = sapply(df, function(x) length(unique(x))) == 1
df = df[, !cols_delete]
}
treatment_unique_colums(clinical_clinical)
clinical_clinical
library(kohonen)
data(wines, package = "kohonen")
class(vintages)
typeof(vintages)
class(vintages)
class(vintages)
typeof(vintages)
summary(vintages)
class(vintages)
class(wines)
typeof(wines)
summary(wines)
library(TCGAbiolinks)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(TCGAbiolinks)
library(TCGAbiolinks)
library(SummarizedExperiment)
projects = getGDCprojects()
projects$id
proj = "TCGA-GBM"
query = GDCquery(
project = proj,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
GDCdownload(query)
data_rna_GBM= GDCprepare(query)
data_rna_GBM= GDCprepare(query)
class(data_rna_GBM)
class(data_rna_GBM)
dim(data_rna_GBM)
data_rna_GBM$paper_BCR
data_rna_GBM$paper_Gender
data_rna_GBM$paper_Grade
data_rna_GBM$paper_IDH.status
meta_GBM = colData(data_rna_GBM)
dim(meta_GBM)
meta_GBM$patient
meta_GBM$paper_IDH.status
library(DESeq2)
data_de = data_rna_GBM[,!is.na(data_rna_UCEC$paper_IDH.status)]
library(DESeq2)
data_de = data_rna_GBM[,!is.na(data_rna_UCEC$paper_IDH.status)]
class(data_rna_GBM)
dim(data_rna_GBM)
data_rna_GBM$paper_BCR
data_rna_GBM$paper_Gender
data_rna_GBM$paper_Grade
data_rna_GBM$paper_IDH.status
meta_GBM = colData(data_rna_GBM)
dim(meta_GBM)
meta_GBM$patient
meta_GBM$paper_IDH.status
library(DESeq2)
data_de = data_rna_GBM[,!is.na(data_rna_UCEC$paper_IDH.status)]
data_de = data_rna_GBM[,!is.na(data_rna_GBM$paper_IDH.status)]
ddsSE = DESeqDataSet(data_de, design = ~ paper_IDH.status)
keep = rowSums(counts(ddsSE)) >= 10
ddsSE = ddsSE[keep,]
ddsSE = DESeq(ddsSE)
resultsNames(ddsSE)
res = results(ddsSE, name = "paper_IDH.status_WT_vs_Mutant")
dea = as.data.frame(res)
summary(res)
query_clin = GDCquery(project = "TCGA-GBM",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = "BCR Biotab")
query_clin = GDCquery(project = "TCGA-GBM",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = "BCR Biotab")
GDCdownload(query_clin)
clinical.GBM = GDCprepare(query_clin)
names(clinical.GBM)
clinical.GBM$clinical_omf_v4.0_gbm
clinical.GBM$clinical_drug_gbm
head (clinical.GBM$clinical_omf_v4.0_gbm )
df = as.data.frame(clinical.GBM$clinical_omf_v4.0_gbm)
View(df)
head (clinical.GBM$clinical_patient_gbm )
df = as.data.frame(clinical.GBM$clinical_patient_gbm)
View(df)
head (clinical.GBM$clinical_drug_gbm )
df = as.data.frame(clinical.GBM$clinical_patient_gbm)
View(df)
head (clinical.GBM$clinical_drug_gbm )
df = as.data.frame(clinical.GBM$clinical_patient_gbm)
View(df)
head (clinical.GBM$clinical_drug_gbm )
df = as.data.frame(clinical.GBM$clinical_patient_gbm)
View(df)
head (clinical.GBM$clinical_radiation_gbm )
df = as.data.frame(clinical.GBM$clinical_radiation_gbm)
View(df)
head (clinical.GBM$clinical_drug_gbm )
df = as.data.frame(clinical.GBM$clinical_patient_gbm)
View(df)
head (clinical.GBM$clinical_drug_gbm )
df = as.data.frame(clinical.GBM$clinical_drug_gbm)
View(df)
class(data_rna_GBM)
dim(data_rna_GBM)
data_rna_GBM$paper_BCR
data_rna_GBM$paper_Gender
data_rna_GBM$paper_Grade
data_rna_GBM$paper_IDH.status
meta_GBM = colData(data_rna_GBM)
dim(meta_GBM)
meta_GBM$patient
meta_GBM$paper_IDH.status
data_rna_GBM$paper_IDH.status
data_rna_GBM$paper_BCR
data_rna_GBM$paper_Gender
data_rna_GBM$paper_Grade
data_rna_GBM$paper_BCR
data_rna_GBM$paper_BCR
data_rna_GBM$sample_type_id
data_rna_GBM$bcr_patient_barcode
data_rna_GBM$paper_BCR
data_rna_GBM$tumor_descriptor
data_rna_GBM$tumor_grade
meta_GBM = colData(data_rna_GBM)
dim(meta_GBM)
meta_GBM$patient
meta_GBM$paper_IDH.status
